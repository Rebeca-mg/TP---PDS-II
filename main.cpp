/**
 * @file main.cpp
 * @brief Ponto de entrada principal do Jogo Simon
 * @author Projeto Acad√™mico C++11
 * @date 2025
 * @version 1.0
 */

#include "SimonGame.h"
#include <iostream>
#include <exception>

/**
 * @brief Fun√ß√£o principal do programa
 * 
 * Inicializa o jogo Simon e executa o loop principal.
 * Trata exce√ß√µes globais e retorna c√≥digo de sa√≠da apropriado.
 * 
 * @return int C√≥digo de sa√≠da (0 = sucesso, != 0 = erro)
 */
int main() {
    try {
        // Exibir informa√ß√µes de inicializa√ß√£o
        std::cout << "=================================================\n";
        std::cout << "    üéÆ JOGO SIMON - PROJETO ACAD√äMICO C++11\n";
        std::cout << "=================================================\n";
        std::cout << "Vers√£o: " << SimonGame::getVersion() << "\n";
        std::cout << "Autor: Projeto Acad√™mico\n";
        std::cout << "Data: 2025\n\n";
        
        std::cout << "Inicializando componentes do jogo...\n";
        
        // Criar inst√¢ncia do jogo principal
        SimonGame game;
        
        std::cout << "‚úÖ Jogo inicializado com sucesso!\n";
        std::cout << "üöÄ Iniciando Simon Game...\n\n";
        
        // Executar o jogo
        int exitCode = game.run();
        
        if (exitCode == 0) {
            std::cout << "\n‚úÖ Jogo encerrado normalmente.\n";
        } else {
            std::cout << "\n‚ö†Ô∏è Jogo encerrado com c√≥digo: " << exitCode << "\n";
        }
        
        return exitCode;
        
    } catch (const std::bad_alloc& e) {
        std::cerr << "\n‚ùå ERRO CR√çTICO: Mem√≥ria insuficiente!\n";
        std::cerr << "Detalhes: " << e.what() << std::endl;
        return 2;
        
    } catch (const std::runtime_error& e) {
        std::cerr << "\n‚ùå ERRO DE EXECU√á√ÉO: " << e.what() << std::endl;
        std::cerr << "O jogo n√£o pode continuar.\n";
        return 3;
        
    } catch (const std::logic_error& e) {
        std::cerr << "\n‚ùå ERRO L√ìGICO: " << e.what() << std::endl;
        std::cerr << "Erro interno do programa.\n";
        return 4;
        
    } catch (const std::exception& e) {
        std::cerr << "\n‚ùå ERRO INESPERADO: " << e.what() << std::endl;
        std::cerr << "Tipo: " << typeid(e).name() << std::endl;
        return 5;
        
    } catch (...) {
        std::cerr << "\n‚ùå ERRO DESCONHECIDO!\n";
        std::cerr << "Ocorreu uma exce√ß√£o n√£o tratada.\n";
        return 6;
    }
}
